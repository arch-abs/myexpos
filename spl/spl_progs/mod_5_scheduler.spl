alias currPID R0;
alias curr_process_table R1;
alias loop_counter R5;

alias counter R2;
alias newPID R3;
alias new_process_table R4;


currPID = [SYSTEM_STATUS_TABLE + 1];
multipush (BP);
curr_process_table = PROCESS_TABLE + currPID*16;
[curr_process_table + 12] = SP%512;
[curr_process_table + 14] = PTBR;
[curr_process_table + 15] = PTLR;

newPID = 0;

if([SYSTEM_STATUS_TABLE + 5] != 0) then		//if paging is on 

	if([PROCESS_TABLE + 15*16 + 4] != READY) then	//checking if swapper daemon is blocked

		newPID = 0;
	else
		newPID = 15;

	endif;

else
	counter = currPID + 1;

	loop_counter = 0;
	while(loop_counter < 17) do
		if(counter>=16) then
			counter = 1;
		endif;
	
		new_process_table = PROCESS_TABLE + counter*16;
		if([new_process_table + 4]==CREATED || [new_process_table + 4]==READY) then
			newPID = counter;
			break;
		endif;
		counter = counter + 1;
		loop_counter = loop_counter + 1;
	endwhile;

	//if(newPID == 0 && [curr_process_table + 4]==READY) then		//this part seems redundant
	//	newPID = currPID;
	//endif;

endif;

new_process_table = PROCESS_TABLE + newPID*16;

SP = [new_process_table + 11]*512 + [new_process_table + 12];
PTBR = [new_process_table + 14];
PTLR = [new_process_table + 15];
[SYSTEM_STATUS_TABLE + 1] = newPID;

if([new_process_table + 4] == CREATED) then
	BP = [[new_process_table + 11]*512];
	SP = [new_process_table + 13];
	[new_process_table + 4] = RUNNING;
	[new_process_table + 9] = 0;
	ireturn;
endif;

[new_process_table + 4] = RUNNING;
multipop (BP);

return;
