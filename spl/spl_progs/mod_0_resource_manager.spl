alias functionNum R1;
alias currentPID R2;
alias counter R3;

if(functionNum == 8) then
	while([TERMINAL_STATUS_TABLE + 0] == 1) do
		[PROCESS_TABLE + currentPID*16 + 4] = WAIT_TERMINAL;
		backup;		//instead of multipush
		call MOD_5;
		restore;	//instead of multipop
	endwhile;

	[TERMINAL_STATUS_TABLE + 0] = 1;
	[TERMINAL_STATUS_TABLE + 1] = currentPID;

	return;
endif;

if(functionNum == 9) then
	if(currentPID != [TERMINAL_STATUS_TABLE + 1]) then
		R0 = -1;
		return;
	endif;
	[TERMINAL_STATUS_TABLE + 0] = 0;
	counter = 0;

	//----setting all process that were WAIT_TERMINAL to READY----
	while(counter < 16) do
		if([PROCESS_TABLE + counter*16 + 4] == WAIT_TERMINAL) then
			[PROCESS_TABLE + counter*16 + 4] = READY;
		endif;
		counter = counter+ 1;
	endwhile;
	R0 = 0;
	
	return;
endif;

if(functionNum == ACQUIRE_DISK) then
	while([DISK_STATUS_TABLE + 0] == 1) do 
		[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 4] = WAIT_DISK;
		multipush(R0, R1, R2, R3);
		call MOD_5;
		multipop(R0, R1, R2, R3);
	endwhile;
						//LOCK the DISK when available
	[DISK_STATUS_TABLE + 0] = 1;		//setting STATUS as 1 in DISK_STAT_TAB
	[DISK_STATUS_TABLE + 4] = currentPID;	//setting PID as currPID in DISK_STAT_TAB

	return;
endif;

return;

