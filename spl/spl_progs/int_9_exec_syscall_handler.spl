alias userSP R0;
alias currPID R1;
alias curr_process_table R2;
alias physicalPageNum R3;
alias offset R4;
alias fileName R5;
alias index R6;
alias userAreaPageNum R7;
alias i R8;


currPID = [SYSTEM_STATUS_TABLE + 1];
curr_process_table = PROCESS_TABLE + currPID*16;

userSP = SP;

[curr_process_table + 13] = SP;		//saving user stack
SP = [curr_process_table + 11]*512 - 1;		//switching to kernel stack(empty)
[curr_process_table + 9] = 9;		//setting mode to syscall numof exec


physicalPageNum = [PTBR + 2*((userSP-4)/512)];
offset = (userSP-4)%512;

fileName = [physicalPageNum*512 + offset];





//-------------searching inode table for required EXEC file------------------

index = 1; //not checking first entry in inode table as reserved for ROOT file
while(index < MAX_FILE_NUM) do
	if([INODE_TABLE + 16*index + 1]==fileName && [INODE_TABLE + 16*index + 0]==EXEC) then
		break;
	endif;
index = index + 1;
endwhile;

//-------------------------------searching DONE-------------------------------





if(index == MAX_FILE_NUM) then
	[[PTBR + 2*((userSP-1)/512)]*512 + ((userSP-1)%512)] = -1;		//return value -1 if file not found
	[curr_process_table + 9] = 0;
	SP = [curr_process_table + 13];
	ireturn;
endif;





//----------------calling EXIT_PROECSS to free resources and pages used by curr processe------------

//breakpoint;

//multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8);
backup;

R2  = currPID;		//passing current PID as arg		!!!>>>>CAUTION<<<<<!!! notive the order since currPID itself is alias of R1
R1 = EXIT_PROCESS;		//passing 3 FUNC_NUM of EXIT_PROCESS function of MOD_1_PROCESS_MANAGER_MODULE

call MOD_1;		//calling PROCESS_MANAGER module

//multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8);
restore;

//---------------------------------------DONE_CALLIN EXIT_PROCESS-----------------------------------





//--------------------------------------------------------------------------------------------------

userAreaPageNum = [curr_process_table + 11];			//same user area page wiil be used for new process
[MEMORY_FREE_LIST + userAreaPageNum] = [MEMORY_FREE_LIST + userAreaPageNum] + 1;		//reclaim same user area page for user area page of new process
[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;		//decrement MEM_FREE_COUNT in SYS_STAT_TABLE

//PID of new process will be same as currPID
SP = [curr_process_table + 11]*512 - 1;			//REDUNDANT...initializing SP to STACK of NEW_PROCESS for furthur MOD CALLS (actually it is same as previous KERNEL STACK)

[curr_process_table + 4] = RUNNING;		//set state of new process to RUNNING in PROCESS_TABLE
[curr_process_table + 7] = index;		//set INODE_INDEX in PROCESS_TABLE

//--------------------------------------------------------------------------------------------------







//----------------------intialiazing PER_PROCESS_TABLE of the NEW process----------------------------
i = 496;		//PER_PROCESSS_TAB is present in last 16 words of USER_AREA_PAGE with 16 entries of two words each
while(i < 512) do
	[userAreaPageNum*512 + i] = -1;		//setting -1 RESOURCE_IDENTIFIER fied of PER_PROCESS_TABLE
i = i + 2;
endwhile;
//--------------------DONE intialiazing PER_PROCESS_TABLE of the NEW process-------------------------






//-------------------allocate new pages and set up PAGE_TABLE of the NEW PROCESS--------------------
// ######------ invalidating all PAGE_TAB entries initially
[PTBR + 0] = -1;
[PTBR + 1] = "0000";
[PTBR + 2] = -1;
[PTBR + 3] = "0000";

[PTBR + 4] = -1;
[PTBR + 5] = "0000";
[PTBR + 6] = -1;
[PTBR + 7] = "0000";

[PTBR + 8] = -1;
[PTBR + 9] = "0000";
[PTBR + 10] = -1;
[PTBR + 11] = "0000";
[PTBR + 12] = "-1";
[PTBR + 13] = "0000";
[PTBR + 14] = -1;
[PTBR + 15] = "0000";

[PTBR + 16] = -1;
[PTBR + 17] = "0000";
[PTBR + 18] = -1;
[PTBR + 19] = "0000";


// ######------ setting up LIB entry PAGE_TABLE------######
PTBR = PAGE_TABLE_BASE + currPID*20;		//REDUNDANT...actually PTBR was this value before itself
[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";


// ######-----setting up STACK_1 in PAGE_TABLE------######
//multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8);
backup;
R1 = GET_FREE_PAGE;		//passing FUNC_NUM of get_free_page of MOD_2_MEMORY_MANAGER_MODULE

call MOD_2;		//calling MEMORY_MANAGER_MODULE

[PTBR + 16] = R0;		//mapping virt addr to free physical addr returned
[PTBR + 17] = "0110";

//multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8);
restore;



// ######------setting up STACK_2 in PAGE_TABLE------######
//multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8);
backup;
R1 = GET_FREE_PAGE;		//passing FUNC_NUM of get_free_page of MOD_2_MEMORY_MANAGER_MODULE

call MOD_2;		//calling MEMORY_MANAGER_MODULE

[PTBR + 18] = R0;		//mapping virt addr to free physical addr returned
[PTBR + 19] = "0110";

//multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8);
restore;


// ######-----setting up HEAP_1 in PAGE_TABLE-------######
////multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8);
//backup;
//R1 = GET_FREE_PAGE;		//passing FUNC_NUM of get_free_page of MOD_2_MEMORY_MANAGER_MODULE

//call MOD_2;		//calling MEMORY_MANAGER_MODULE

//[PTBR + 4] = R0;		//mapping virt addr to free physical addr returned
//[PTBR + 5] = "0110";

////multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8);
//restore;

//// ######-----setting up HEAP_2 in PAGE_TABLE-------######
////multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8);
//backup;
//R1 = GET_FREE_PAGE;		//passing FUNC_NUM of get_free_page of MOD_2_MEMORY_MANAGER_MODULE

//call MOD_2;		//calling MEMORY_MANAGER_MODULE

//[PTBR + 6] = R0;		//mapping virt addr to free physical addr returned
//[PTBR + 7] = "0110";

////multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8);
//restore;


//// ######-----loading and setting up PAGE_TABLE for code blocks------######


if([INODE_TABLE + index*16 + 8] != -1) then
	//multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8);
	backup;
	R1 = GET_CODE_PAGE;		//passing FUNC_NUM of get_free_page of MOD_2_MEMORY_MANAGER_MODULE
	R2 = [INODE_TABLE + index*16 + 8];
	
	call MOD_2;		//calling MEMORY_MANAGER_MODULE
	
	[PTBR + 8] = R0;		//mapping virt addr to free physical addr returned
	[PTBR + 9] = "0100";

	//multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8);
	restore;
endif;

//if([INODE_TABLE + index*16 + 9] != -1) then
//	//multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8);
//	backup;
//	R1 = GET_FREE_PAGE;		//passing FUNC_NUM of get_free_page of MOD_2_MEMORY_MANAGER_MODULE
//
//	call MOD_2;		//calling MEMORY_MANAGER_MODULE
//	
//	[PTBR + 10] = R0;		//mapping virt addr to free physical addr returned
//	[PTBR + 11] = "0100";
//
//	//multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8);
//	restore;
//
//	
//	//loadi([PTBR + 10], [INODE_TABLE + index*16 + 9]);
//	//multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8);
//	backup;
//	R2 = currPID;		//!!!>>>>CAUTION<<<<<!!! notive the order since currPID itself is alias of R1
//	R1 = DISK_LOAD;
//	R3 = [PTBR + 10];
//	R4 = [INODE_TABLE + index*16 + 9];
//	call MOD_4;				//loading by calling LOAD_DISK from DEVICE_MANAGER_MODULE
//	//multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8);
//	restore;
//endif;

//if([INODE_TABLE + index*16 + 10] != -1) then
//	//multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8);
//	backup;
//	R1 = GET_FREE_PAGE;		//passing FUNC_NUM of get_free_page of MOD_2_MEMORY_MANAGER_MODULE
//
//	call MOD_2;		//calling MEMORY_MANAGER_MODULE
//	
//	[PTBR + 12] = R0;		//mapping virt addr to free physical addr returned
//	[PTBR + 13] = "0100";
//
//	//multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8);
//	restore;
//
//	
//	//loadi([PTBR + 12], [INODE_TABLE + index*16 + 10]);
//	//multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8);
//	backup;
//	R2 = currPID;		//!!!>>>>CAUTION<<<<<!!! notive the order since currPID itself is alias of R1
//	R1 = DISK_LOAD;
//	R3 = [PTBR + 12];
//	R4 = [INODE_TABLE + index*16 + 10];
//	call MOD_4;				//loading by calling LOAD_DISK from DEVICE_MANAGER_MODULE
//	//multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8);
//	restore;
//endif;

//if([INODE_TABLE + index*16 + 11] != -1) then
//	//multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8);
//	backup;
//	R1 = GET_FREE_PAGE;		//passing FUNC_NUM of get_free_page of MOD_2_MEMORY_MANAGER_MODULE
//
//	call MOD_2;		//calling MEMORY_MANAGER_MODULE
//	
//	[PTBR + 14] = R0;		//mapping virt addr to free physical addr returned
//	[PTBR + 15] = "0100";
//
//	//multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8);
//	restore;
//
//
//	//loadi([PTBR + 14], [INODE_TABLE + index*16 + 11]);
//	//multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8);
//	backup;
//	R2 = currPID;		//!!!>>>>CAUTION<<<<<!!! notive the order since currPID itself is alias of R1
//	R1 = DISK_LOAD;
//	R3 = [PTBR + 14];
//	R4 = [INODE_TABLE + index*16 + 11];
//	call MOD_4;				//loading by calling LOAD_DISK from DEVICE_MANAGER_MODULE
//	//multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8);
//	restore;
//endif;	

//----------------------------DONE alloc new pages assgn PAGE TABLE setup----------------------------







//----------------------intialiazing DISK_MAP_TABLE of the NEW process-------------------------------
i=0;
while(i < 10) do
	[DISK_MAP_TABLE + currPID*10 + i] = -1;
i = i + 1;
endwhile;

[DISK_MAP_TABLE + currPID*10 + 4] = [INODE_TABLE + index*16 + 8]; 
[DISK_MAP_TABLE + currPID*10 + 5] = [INODE_TABLE + index*16 + 9] ;
[DISK_MAP_TABLE + currPID*10 + 6] = [INODE_TABLE + index*16 + 10] ;
[DISK_MAP_TABLE + currPID*10 + 7] = [INODE_TABLE + index*16 + 11] ;


//---------------------DONE intialiazing DISK_MAP_TABLE of the NEW process---------------------------







//-------------------------------setting final things up and ireturn---------------------------------

[[PTBR + 16]*512] = [[PTBR + 8]*512 + 1];
SP = 8 * 512;
[curr_process_table + 9] = 0;

ireturn;
//-----------------------------------DONE final settings and return----------------------------------
