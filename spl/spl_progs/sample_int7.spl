[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]*16) + 9] = 5;

//saving userSP into r0
alias userSP R0;
userSP = SP;

//saving value of userSP into UPTR fied entry of process table
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]*16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 11]*512 - 1;
//value to SP ahould be changed to KTPR but ignored here as assumed to be empty when coming from a user program so 0 realtive to user page area


alias physicalPageNum R1;
alias offset R2;
alias fileDescPhysicalAddr R3;
physicalPageNum = [PTBR + 2*((userSP-4)/512)];
offset  = (userSP-4)%512;
fileDescPhysicalAddr = (physicalPageNum*512) + offset;
alias fileDescriptor R4;
fileDescriptor = [fileDescPhysicalAddr];

if(fileDescriptor != -2) then
	[[PTBR + 2*((userSP-1)/512)]*512 + ((userSP-1)%512)] = -1;
else
	alias word R5;
	word = [[PTBR +2*((userSP-3)/512)]*512 + ((userSP-3)%512)];
	
	multipush (R0, R1, R2, R3, R4, R5);
	//print word;
	R1 = 3;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 = word;

	call MOD_4;   //----calling device manager module for terminalWrite------

	multipop (R0, R1, R2, R3, R4, R5);

	[[PTBR + 2*((userSP-1)/512)]*512 + ((userSP-1)%512)] = 0;
endif;

SP = userSP;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 9] = 0;
ireturn;

