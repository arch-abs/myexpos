alias userSP R0;
alias currPID R1;
alias curr_process_table R2;
alias curr_UAP_num R3;

alias sysCallNum R5;
alias i R6;
alias sem_id R7;
alias sem_desc_ind R8;

currPID = [SYSTEM_STATUS_TABLE + 1];
curr_process_table = PROCESS_TABLE + currPID*16;
curr_UAP_num = [curr_process_table + 11];


userSP = SP;
[curr_process_table + 13] = SP;
SP =  [curr_process_table + 11]*512 - 1;

sysCallNum = [[PTBR + 2*((userSP-5)/512)]*512 + (userSP-5)%512];



//breakpoint;			//!!!!!!!!!!!!!!!!!!!!!!!!!>>>>>>>>>>>>>>>>>DBG<<<<<<<<<<<<<<<!!!!!!!!!!!!!!!!!!!!!!!


//-----------------------------STARTING SYSCALL SPECIFIC IMPLEMENTATION------------------------------

// *****syscallnum 19 for semLock*****
if(sysCallNum == 19) then
	[curr_process_table + 9] = 19;	//mode flag to syscallnum
	sem_desc_ind = [[PTBR + 2*((userSP-4)/512)]*512 + (userSP-4)%512];

	if(sem_desc_ind < 0 || sem_desc_ind > 7 || [curr_UAP_num*512 + 2*sem_desc_ind + 496] != SEMAPHORE) then		//things to do is sem_desc_ind is invalid
		[[PTBR + 2*((userSP-1)/512)]*512 + (userSP-1)%512] = -1;

		[curr_process_table + 9] = 0;
                SP = [curr_process_table + 13];
                ireturn;
	else	//things to do if sem_desc_ind is valid
		sem_id = [curr_UAP_num*512 + (2*sem_desc_ind) + 496 + 1];
		while([SEMAPHORE_TABLE + 4*sem_id + 0] != -1 && [SEMAPHORE_TABLE + 4*sem_id + 0] != currPID) do
			[curr_process_table + 4] = WAIT_SEMAPHORE;
			[curr_process_table + 5] = sem_id;

			backup;		//instead of multipush
			call MOD_5;
			restore;` 	//instead of multipop
		endwhile;

		[SEMAPHORE_TABLE + 4*sem_id + 0] = currPID;

		[[PTBR + 2*((userSP-1)/512)]*512 + (userSP-1)%512] = 0;

                [curr_process_table + 9] = 0;
                SP = [curr_process_table + 13];
                ireturn;
	
	endif;
endif;





// *****syscall 20 for semUnLock*****
if(sysCallNum == 20) then
	[curr_process_table + 9] = 20;

	sem_desc_ind = [[PTBR + 2*((userSP-4)/512)]*512 + (userSP-4)%512];

        if(sem_desc_ind < 0 || sem_desc_ind > 7 || [curr_UAP_num*512 + 2*sem_desc_ind + 496] != SEMAPHORE) then             //things to do is sem_desc_ind is invalid
                [[PTBR + 2*((userSP-1)/512)]*512 + (userSP-1)%512] = -1;

                [curr_process_table + 9] = 0;
                SP = [curr_process_table + 13];
                ireturn;
        else	//things to do if sem_desc_ind is valid
                sem_id = [curr_UAP_num*512 + (2*sem_desc_ind) + 496 + 1];
		if([SEMAPHORE_TABLE + 4*sem_id + 0] != currPID) then		//things to do if the sem_to be unlocked is not locked by the current process
			[[PTBR + 2*((userSP-1)/512)]*512 + (userSP-1)%512] = -2;

			[curr_process_table + 9] = 0;
                	SP = [curr_process_table + 13];
                	ireturn;
		else		//things to do if sem to be unlocked by the current process

			[SEMAPHORE_TABLE + 4*sem_id + 0] = -1;

			i = 0;
			while(i < MAX_PROC_NUM) do
                        	if([PROCESS_TABLE + i*16 + 4] == WAIT_SEMAPHORE  && [PROCESS_TABLE + i*16 + 5] == sem_id) then
                                	[PROCESS_TABLE + i*16 + 4] = READY;
                        	endif;
			i = i + 1;
                	endwhile;

			[[PTBR + 2*((userSP-1)/512)]*512 + (userSP-1)%512] = 0;

                        [curr_process_table + 9] = 0;
                        SP = [curr_process_table + 13];
                        ireturn;
		endif;
	endif;

endif;

//--------------------------DONE STARTING SYSCALL SPECIFIC IMPLEMENTATION----------------------------

[curr_process_table + 9] = 0;
SP = [curr_process_table + 13];
ireturn;
