breakpoint;

alias currentPID R0;
alias process_table_entry R1;
alias newPID R2;
alias new_process_table R3;

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]*16) + 13] = SP;
SP = [PROCESS_TABLE+([SYSTEM_STATUS_TABLE + 1]*16) + 11]*512 - 1;
backup;

currentPID = [SYSTEM_STATUS_TABLE + 1];
process_table_entry = PROCESS_TABLE + currentPID*16;

[process_table_entry + 12] = SP%512;
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;
[process_table_entry + 4] = READY;

if(currentPID == 0) then
	newPID = 1;
else
	newPID = 0;
endif;
new_process_table = PROCESS_TABLE + newPID*16;

SP = [new_process_table + 11]*512 + [new_process_table + 12];
PTBR = [new_process_table + 14];
PTLR = [new_process_table + 15];
[SYSTEM_STATUS_TABLE + 1] = newPID;

if([new_process_table + 4] == CREATED) then
	[new_process_table + 4] = RUNNING;
	SP = [new_process_table + 13];
	breakpoint;
	ireturn;
endif;

[new_process_table + 4] = RUNNING;
restore;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]*16) + 13];


//print "Sample Timer...!!!";
//print "Current user process ID is...";
//print  [SYSTEM_STATUS_TABLE + 1];
//print "(printed from kernel mode from time ISR)";

breakpoint;
ireturn;
