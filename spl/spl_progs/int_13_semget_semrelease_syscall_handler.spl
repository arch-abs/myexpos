alias userSP R0;
alias currPID R1;
alias curr_process_table R2;
alias curr_UAP_num R3;

alias sysCallNum R5;
alias i R6;
alias sem_id R7;	//as returned by ACCQUIRE_SEM (the index fo semaphore in the SEMAPHORE_TAB)
alias sem_desc_ind R8;	//index of SEMAPHORE in the PER_PROCESS_RESOURCE_TAB


currPID = [SYSTEM_STATUS_TABLE + 1];
curr_process_table = PROCESS_TABLE + 16*currPID;
curr_UAP_num = [curr_process_table + 11];


userSP = SP;
[curr_process_table + 13] = SP;
SP = [curr_process_table + 11]*512 - 1;

sysCallNum = [[PTBR + 2*((userSP-5)/512)]*512 + (userSP-5)%512];




//-----------------------------STARTING SYSCALL SPECIFIC IMPLEMENTATION------------------------------

// *****syscallnum 17 for SEMGET*****
if(sysCallNum == 17) then
	[curr_process_table + 9] = 17;

	i = 496;
	while(i < 512) do
		if([curr_UAP_num*512 + i] == -1) then
			break;
		endif;
	i = i + 2;
	endwhile;

	if(i == 512) then	//things to do if no entry in PER_PROCESS_RESOURCE_TAB is free
		[[PTBR + 2*((userSP-1)/512)]*512 + (userSP-1)%512] = -1;        //returning to user mode with -1 ret value indicating failure if no entry free in PER_PROC_RES_TAB

		[curr_process_table + 9] = 0;
                SP = [curr_process_table + 13];
                ireturn;
	else			//things to do if a free entry is found ni PER_PROC_RES_TAB

		sem_desc_ind = (i - 496)/2;

		// <<<<<****calling ACCQUIRE_SEM****>>>>>
		multipush (R0, R1, R2, R3, R5, R6, R8);
		R1 = ACCQUIRE_SEMAPHORE;
		R2 = currPID;
		call MOD_0;
		sem_id = R0;		//>>>>>>NOTE!!!<<<<<< SEM_ID is in R& so its not  pushed or poped
		multipop (R0, R1, R2, R3, R5, R6, R8);


		if(sem_id == -1) then	//things to do if no new SEM available
			[[PTBR + 2*((userSP-1)/512)]*512 + (userSP-1)%512] = -2;        //returning to user mode with -2 ret value indicating failure as no free entry im SEM_TAB

			[curr_process_table + 9] = 0;
			SP = [curr_process_table + 13];
			ireturn;
		
		else	//things to do if new SEM available
			
			[curr_UAP_num*512 + i] = SEMAPHORE;	//setting resource identifier for SEMAPHORE in free entry foun in PER_PROC_RES_TAB
			[curr_UAP_num*512 + i + 1] = sem_id;

			[[PTBR + 2*((userSP-1)/512)]*512 + (userSP-1)%512] = sem_desc_ind;

			[curr_process_table + 9] = 0;
               	 	SP = [curr_process_table + 13];
			ireturn;
	
		endif;

	endif;

endif;







// *****syscallnum 18 for SEMRELEASE*****
if(sysCallNum == 18) then
	[curr_process_table + 9] = 18;
	sem_desc_ind = [[PTBR + 2*((userSP-4)/512)]*512 + (userSP-4)%512];

	if(sem_desc_ind < 0 || sem_desc_ind > 7 || [curr_UAP_num*512 + (2*sem_desc_ind) + 496] != SEMAPHORE) then		//things to do if sem_desc_indis not valid
		
		[[PTBR + 2*((userSP-1)/512)]*512 + (userSP-1)%512] = -1;
		
		[curr_process_table + 9] = 0;
		SP = [curr_process_table + 13];
		ireturn;
	else	//things to do if sem_desc_ind is valid

		sem_id = [curr_UAP_num*512 + (2*sem_desc_ind) + 496 + 1];

		backup;	//instead of MULTIPUSH
		R3 = cur_PID;
		R1 = RELEASE_SEMAPHORE;
		R2 = sem_id;
		call MOD_0;	//calling module RELEASE_SEMAPHORE of RESOURCE_MANAGER
		restore;	//insteaf of MULTIPOP

		[curr_UAP_num*512 + (2*sem_desc_ind) + 496] = -1;
		[curr_UAP_num*512 + (2*sem_desc_ind) + 496 + 1] = -1;

		[[PTBR + 2*((userSP-1)/512)]*512 + (userSP-1)%512] = 0;
		[curr_process_table + 9] = 0;
		SP = [curr_process + 13];
		ireturn;
	endif;
endif;

//---------------------------DONE STARTING SYSCALL SPECIFIC IMPLEMENTATION---------------------------



[curr_process_table + 9] = 0;
SP = [curr_process_table + 13];
ireturn;

