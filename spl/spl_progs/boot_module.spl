alias i R1;
alias tmp R2;

//[SYSTEM_STATUS_TABLE + 1] = 1;

//loading idle code from disk to mem
//loadi(69, 11);
//loadi(70, 12);


//--------------------DISK & MEM DS LOADING--------------------

//loading INODE_USER_TABLE
loadi(59, 3);		//NOTE>>>!!!IMP!!!>>>other data structures like process table etc need not be loaded sincethey are not in disk and are setup from scratch every time macihne is booted up.
loadi(60, 4);

//loading DISK_FREE_LIST
loadi(61, 2);

//loading ROOT file from disk to mem
loadi(62, 5);

//-----------------DONE DISK & MEM DS LOADING------------------





//---------------intializing TERM_AND_DISK STATUS FIELDS as FREE respective STATUS TABLES---------------------

[TERMINAL_STATUS_TABLE + 0] = 0;
[DISK_STATUS_TABLE + 0] = 0;

//--------------DONE intializing TERM_AND_DISK STATUS FIELDS as FREE respective STATUS TABLES-----------------






//load timer interrupt routine from disk to memory
loadi(4, 17);
loadi(5, 18);

//load library code from disk to memory
loadi(63, 13);
loadi(64, 14);

//loading init from disk to mem
loadi(65, 7);		//loading only one code pae since samll prgram for efficient meme usage
//loadi(66, 8);

//loading shell from disk to mem
loadi(67, 9);
loadi(68, 10);

//loading execp_handler to mem
loadi(2, 15);
loadi(3, 16);

//loading disk_interrupt_handler
loadi(6, 19);
loadi(7, 20);

//loading console_interrupt_handler
loadi(8, 21);
loadi(9, 22);

//loading int_4_file_creatw_delete_syscall
loadi(10, 23);
loadi(11, 24);

//loading int_5_file_open_close_seek_syscall_handler
loadi(12, 25);
loadi(13, 26);

//loading int_6_read_syscall_handler
loadi(14, 27);
loadi(15, 28);

//loading int7(_write_syscall_handler) from disk to mem
loadi(16, 29);
loadi(17, 30);

//loading int_8_fork_syscall_handler
loadi(18, 31);
loadi(19, 32);

//loading int_9_exec_syscall_handler
loadi(20, 33);
loadi(21, 34);

//loading int_10(_exit_syscall_handler) from disk to mem
loadi(22, 35);
loadi(23, 36);

//loading int_11_wait_signal_getpid_getppid_syscall_handler
loadi(24, 37);
loadi(25, 38);

//loading int_12_logout_syscall_handler
loadi(26, 39);
loadi(27, 40);

//loading int_13_semget_semrelease_syscall_handler
loadi(28, 41);
loadi(29, 42);

//loading int_14_semlock_semunlock_syscall_handler
loadi(30, 43);
loadi(31, 44);

//loading int_15_shutdown_syscall_handler
loadi(32, 45);
loadi(33, 46);

//loading int_16_newusr_remusr_setpwd_getuname_getuid_syscall_handler
loadi(34, 47);
loadi(35, 48);

//loading int_17_login_syscall_handler
loadi(36, 49);
loadi(37, 50);




//---------------------------MODULES LOADING----------------------------

//boot module loaded in os_startup

//load mod_0 RESOURCE_MANAGER
loadi(40, 53);
loadi(41, 54);

//load mod_1_PROCESS_MANAGER
loadi(42, 55);
loadi(43, 56);

//load mod_2_MEMORY_MANAGER
loadi(44, 57);
loadi(45, 58);

//loaf mod_3_FILE_MANAGER
loadi(46, 59);
loadi(47, 60);

//load mod_4 DEVICE_MANAGER
loadi(48, 61);
loadi(49, 62);	

//load mod_5 SCHEDULER
loadi(50, 63);
loadi(51, 64);

//load mod_6 PAGER
loadi(52, 65);
loadi(53, 66);


//----------------------DONE MODULE LOADING-----------------------------









//-----------------------initialize MEM_FREE_LIST-----------------------

i = 0;				//setting all non user program pages to 1
while(i <= 75) do
	[MEMORY_FREE_LIST + i] = 1;
i = i + 1;
endwhile;

i = 76;				//setting 76-82 user prog pages as 1 since allocated to heap, stack , user area page etc of idle, init, daemon etc.
while(i <= 82) do
	[MEMORY_FREE_LIST + i] = 1;
i = i + 1;
endwhile;


i = 83;				//setting rest of user prog pages as 0 ie free
while(i <= 127) do
	[MEMORY_FREE_LIST + i] = 0;
i = i + 1;
endwhile;

				//!!!!!>>>>>ALERT<<<<!!!!! this part might need to be removed
i = 128;			//setting exetended mem pages (used in NEXSM) as 1;
while(i <= 143) do
	[MEMORY_FREE_LIST + i] = 1;
i = i + 1;
endwhile;

//--------------------DONE initialize MEM_FREE_LIST---------------------








//--------------INTITIALIZE WAIT_MEM_COUNT & MEM_FREE_COUNT, SWAP_COUNT, PAGING_STATUS------------

[SYSTEM_STATUS_TABLE + 3] = 0;		//initialize WAIT_MEM_COUNT
[SYSTEM_STATUS_TABLE + 2] = 45;		//initialize MEM_FREE_COUNT to this since out of USER_PROGRAM pages 76-127 ..76-82 are used up for stack, heap, user area page etc of idle and intinit etc so effectively 83-127 available

[SYSTEM_STATUS_TABLE + 4] = 0;		//initialize SWAP_COUNT
[SYSTEM_STATUS_TABLE + 5] = 0;		//initialize PAGING_STATUS

//------------DONE INTITIALIZE WAIT_MEM_COUNT & MEM_FREE_COUNT----------








//-----------------------initialize SEMAPHORE_TABLE-----------------------

i = 0;				//setting all non user program pages to 1
while(i < MAX_SEM_COUNT) do
	tmp = SEMAPHORE_TABLE + 4*i;
	[tmp] = -1;
	[tmp + 1] = 0;
i = i + 1;
endwhile;


//--------------------DONE initialize SEMAPHORE_TABLE---------------------










//------------------initialize FILE(INDOE)_STATUS_TABLE--------------------

i = 0;				//setting all non user program pages to 1
while(i < MAX_FILE_NUM) do
	tmp = FILE_STATUS_TABLE + 4*i;
	[tmp] = -1;
	[tmp + 1] = -1;
i = i + 1;
endwhile;

//-------------------DONE initialize INODE_SATUS__TABLE--------------------








//-----------------------initialize BUFFER_TABLE--------------------------

i = 0;				//setting all non user program pages to 1
while(i < MAX_BUFFER) do
	tmp = BUFFER_TABLE + 4*i;
	[tmp] = -1;
	[tmp + 1] = 0;
	[tmp + 2] = -1;
i = i + 1;
endwhile;

//----------------------DONE initialize BUFFER_TABLE-----------------------








//-----------------------initialize OPEN_FILE_TABLE-------------------------

i=0;
while(i < MAX_OPENFILE_NUM) do
	tmp = OPEN_FILE_TABLE + 4*i;
	[tmp] = -1;	//inode index to -1
	[tmp + 1] = 0;	//open_instance_count to 0
i = i + 1;
endwhile;

//--------------------DONE initialize OPEN_FILE_TABLE-----------------------








//--------------SETTING UNUSED PROCESS TABLE STATE AS TERMINATED and TICK 0--------------
//[PROCESS_TABLE + 16 + 4] = TERMINATED;
//[PROCESS_TABLE + 32 + 4] = TERMINATED;
//[PROCESS_TABLE + 48 + 4] = TERMINATED;
//[PROCESS_TABLE + 64 + 4] = TERMINATED;
//[PROCESS_TABLE + 80 + 4] = TERMINATED;
//[PROCESS_TABLE + 96 + 4] = TERMINATED;
//[PROCESS_TABLE + 112 + 4] = TERMINATED;
//[PROCESS_TABLE + 128 + 4] = TERMINATED;
//[PROCESS_TABLE + 144 + 4] = TERMINATED;
//[PROCESS_TABLE + 160 + 4] = TERMINATED;
//[PROCESS_TABLE + 176 + 4] = TERMINATED;
//[PROCESS_TABLE + 192 + 4] = TERMINATED;
//[PROCESS_TABLE + 208 + 4] = TERMINATED;
//[PROCESS_TABLE + 224 + 4] = TERMINATED;
//[PROCESS_TABLE + 240 + 4] = TERMINATED;


i = 1;
while(i < MAX_PROC_NUM) do
	tmp = PROCESS_TABLE + 16*i;
	[tmp] = 0;		//setting TICK to 0 for all processes
	[tmp + 4] = TERMINATED;
i = i + 1;
endwhile;
//----------------------DONE SETTING UP AS TERMINATED and TICK 0-------------------------






//setting up page table for idle
//PTBR = PAGE_TABLE_BASE;
//PTLR = 10;

//[PTBR+0] = -1;
//[PTBR+1] = "0000";
//[PTBR+2] = -1;
//[PTBR+3] = "0000";

//[PTBR+4] = -1;
//[PTBR+5] = "0000";
//[PTBR+6] = -1;
//[PTBR+7] = "0000";

//[PTBR+8] = 69;
//[PTBR+9] = "0100";
//[PTBR+10] = 70;
//[PTBR+11] = "0100";
//[PTBR+12] = -1;
//[PTBR+13] = "0000";
//[PTBR+14] = -1;
//[PTBR+15] = "0000";

//[PTBR+16] = 81;
//[PTBR+17] = "0110";
//[PTBR+18] = -1;
//[PTBR+19] = "0000";

//[81*512] = [69*512 + 1];

//setting up process table for idle
//[PROCESS_TABLE + 1] = 0;
//[PROCESS_TABLE + 4] = READY;
//[PROCESS_TABLE + 11] = 82;
//[PROCESS_TABLE + 12] = 0;
//[PROCESS_TABLE + 13] = 8*512;
//[PROCESS_TABLE + 14] = PTBR;
//[PROCESS_TABLE + 15] = PTLR;






//-------------------------INIT loading and setup-------------------------
PTBR = PAGE_TABLE_BASE + 20;
PTLR = 10;

i = 0;
while(i < 20) do
	[PTBR + i] = -1;
	[PTBR + i + 1] = "0000";
i = i + 2;
endwhile;


[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//[PTBR+4] = -1;
//[PTBR+5] = "0000";
//[PTBR+6] = -1;
//[PTBR+7] = "0000";

[PTBR+8] = 65;
[PTBR+9] = "0100";
//[PTBR+10] = -1;
//[PTBR+11] = "0000";
//[PTBR+12] = -1;
//[PTBR+13] = "0000";
//[PTBR+14] = -1;
//[PTBR+15] = "0000";

[PTBR+16] = 66;
[PTBR+17] = "0110";
//[PTBR+18] = -1;
//[PTBR+19] = "0000";

//setting up process table for init

tmp = PROCESS_TABLE + 16;

[tmp + 1] = 1;
[tmp + 3] = 1;	//setting USERID of init to ROOT (this is not final, (will change when we implement multiuser)
[tmp + 4] = CREATED;
[tmp + 11] = 77;
[tmp + 12] = 0;
[tmp + 13] = 8*512;
[tmp + 14] = PTBR;
[tmp + 15] = PTLR;


//initializing PER_PROCESS_RESOURCE_TAB of INIT
i = 496;
while(i < 512) do
	[[PROCESS_TABLE + 27]*512 + i] = -1;	//[[PROCESS_TABLE + 16 + 11]*512 + i] = -1;

i = i + 2;
endwhile;


////intializing DISK_MAP_TABLE for INIT
//i = 0;
//while(i < 10) do
//	[DISK_MAP_TABLE + 10 + i] = -1;
//i = i + 1;
//endwhile;
//[DISK_MAP_TABLE + 10 + 4] = 7;
//[DISK_MAP_TABLE + 10 + 5] = 8;


[66*512] = [65*512 + 1];

//SP = 8*512;
//PTBR = PAGE_TABLE_BASE + 20;
//PTLR = 10;
//ireturn;
//-------------------------DONE INIT loading and setup-------------------------





//-------------------------SHELL loading and setup-------------------------
PTBR = PAGE_TABLE_BASE + 40;
PTLR = 10;


i = 0;
while(i < 20) do
	[PTBR + i] = -1;
	[PTBR + i + 1] = "0000";
i = i + 2;
endwhile;


[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//[PTBR+4] = -1;
//[PTBR+5] = "0000";
//[PTBR+6] = -1;
//[PTBR+7] = "0000";

[PTBR+8] = 67;
[PTBR+9] = "0100";
[PTBR+10] = 68;
[PTBR+11] = "0100";
//[PTBR+12] = -1;
//[PTBR+13] = "0000";
//[PTBR+14] = -1;
//[PTBR+15] = "0000";

[PTBR+16] = 78;
[PTBR+17] = "0110";
[PTBR+18] = 79;
[PTBR+19] = "0110";

//setting up process table for Shell

tmp = PROCESS_TABLE + 32;

[tmp + 1] = 2;	//PID 2
[tmp + 2] = 1;	//PPID 1(parent od login(init))
[tmp + 3] = 1;	//setting USERID of init to ROOT (this is not final, (will change when we implement multiuser)
[tmp + 4] = TERMINATED;
[tmp + 11] = 80;
[tmp + 12] = 0;
[tmp + 13] = 4096;
[tmp + 14] = PTBR;
[tmp + 15] = PTLR;


//initializing PER_PROCESS_RESOURCE_TAB of SHELL
i = 496;
while(i < 512) do
	[40960 + i] = -1;	//40960 = 80*512 (80 is UAP)
i = i + 2;
endwhile;


//intializing DISK_MAP_TABLE for SHELL
i = 0;
while(i < 10) do
	[DISK_MAP_TABLE + 20 + i] = -1;
i = i + 1;
endwhile;
[DISK_MAP_TABLE + 24] = 9;	//20 + 4
[DISK_MAP_TABLE + 25] = 10;	//20 + 5


[39936] = [34305];	//[78*512] = [67*512 + 1];

//SP = 8*512;
//PTBR = PAGE_TABLE_BASE + 20;
//PTLR = 10;
//ireturn;
//-------------------------DONE SHELL loading and setup-------------------------
















//-------------------------EXEC ev_num loading and setup-------------------------

////loading exec ev_num from disk to mem
//loadi(83, 69);
//
////setting up page table for ecec ev_num
//PTBR = PAGE_TABLE_BASE + 40;
//PTLR = 10;
//
//[PTBR + 0] = 63;
//[PTBR + 1] = "0100";
//[PTBR + 2] = 64;
//[PTBR + 3] = "0100";
//
//[PTBR + 4] = 86;
//[PTBR + 5] = "0110";
//[PTBR + 6] = 87;
//[PTBR + 7] = "0110";
//
//[PTBR + 8] = 83;
//[PTBR + 9] = "0100";
//[PTBR + 10] = -1;
//[PTBR + 11] = "0000";
//[PTBR + 12] = -1;
//[PTBR + 13] = "0000";
//[PTBR + 14] = -1;
//[PTBR + 15] = "0000";
//
//[PTBR + 16] = 84;
//[PTBR + 17] = "0110";
//[PTBR + 18] = 85;
//[PTBR + 19] = "0110";
//
////set up process table for exec ev_num
//[PROCESS_TABLE + 32 + 1] = 2;
//[PROCESS_TABLE + 32 + 4] = CREATED;
//[PROCESS_TABLE + 32 + 11] = 88;
//[PROCESS_TABLE + 32 + 12] = 0;
//[PROCESS_TABLE + 32 + 13] = 8*512;
//[PROCESS_TABLE + 32 + 14] = PTBR;
//[PROCESS_TABLE + 32 + 15] = PTLR;
//
//[84*512] = [83*512 + 1];
//------------------------DONE setting up EXEC ev_num-------------------------



return;
